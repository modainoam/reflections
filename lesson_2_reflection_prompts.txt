What happens when you initialize a repository? Why do you need to do it?
	The repository starts being tracked by Git. Meaning starting now, if you commit
	in this directory all the changes will be tracked.
	This sets up the hierarchy you wish to track. Sepcifyig how
	broad or narrow the project you want to track is.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area gives you a way to track mid-term changes, before you commit 
	them. That way you can make sure all the changes you performed are
	relevant before you commit them and make them part of your project.
	It also allows you to have a QA environment.

How can you use the staging area to make sure you have one commit per logical
change?
	Before commiting, this gives me a chance to see the changes I made to
	the project as well as an opportunity to check if the repo itself
	has changed since my changes and allows me to work on multiple changes
	and still be able to split them into multiple logical commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Thanks to branches I can try to add new big features while simultaneously
	working on other parts of the project. By creating a branch, I can easily
	return to the last point I was working on. Also, it doesn't require me
	to add middle changes so that I only commit final changes to the master.

How do the diagrams help you visualize the branch structure?
	They allow me to see exactly when I diverged to work on a new feature,
	and to understand what is missing at that point for it to be updated.
	They also help me see where I stand on each of my different tasks.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result is one new branch which includes the changes performed in both 
	branches. We therefore represent it in the diagram as one branch comprised
	of all the changes in these two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Pros - It saves a lot of time code reviewing and allows multiple people to 
	work on the same project at the same time.
	Cons - There are errors and bugs involved which take time to resolve.
	Also it makes changing global variables more difficult as different
	people might rely on a modified piece of code.